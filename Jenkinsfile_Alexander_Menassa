pipeline {
    agent any
    environment {
        VIRTUAL_ENV = 'venv' // Name of the virtual environment folder
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    // Check if the virtual environment already exists
                    if (!fileExists("${env.WORKSPACE}\\${VIRTUAL_ENV}")) {
                        // Create the virtual environment using the specified Python executable
                        bat "C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\python.exe -m venv ${VIRTUAL_ENV}"
                    }
                    // Activate the virtual environment and install requirements
                    bat "call ${VIRTUAL_ENV}\\Scripts\\activate && pip install -r requirements.txt"
                }
            }
        }
        stage('Lint') {
            steps {
                script {
                    // Activate the virtual environment and run flake8
                    bat "call ${VIRTUAL_ENV}\\Scripts\\activate && flake8 app.py"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    // Activate the virtual environment and run pytest
                     bat "call ${VIRTUAL_ENV}\\Scripts\\activate && set PYTHONPATH=%WORKSPACE% && pytest"
                }
            }
        }
        stage('Coverage') {
            steps {
                script {
                    // Activate the virtual environment, run coverage, and generate a report
                    bat "call ${VIRTUAL_ENV}\\Scripts\\activate && coverage run -m pytest && coverage report && coverage html"
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    try{
                        bat "call ${VIRTUAL_ENV}\\Scripts\\activate && set PYTHONIOENCODING=utf-8 && bandit -r . -f txt -o bandit_report.txt"
                    }
                    catch (Exception e) {
                        echo 'Bandit check failed, but continuing...'
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // Deployment logic, e.g., pushing to a remote server
                    echo "Deploying application..."
                }
            }
        }
    }
    post {
        always {
            // Clean up the workspace after the build
            cleanWs()
        }
    }
}
